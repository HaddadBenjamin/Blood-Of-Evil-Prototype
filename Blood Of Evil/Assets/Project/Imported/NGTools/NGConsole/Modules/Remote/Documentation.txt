Features:
Network Protocol
IG Console
Console Line Interpreter
Async Network


Implementing:


Non-implemented:
Thread-safe network
GameObject Browser

Command Architecture:
Unity Editor < Any Build
Browser < Any Build

RootCommand.SubCmd.field
				  .field XXX
				  .Method
				  .Method(Arg1)
				  .Method(Arg1, Arg2)
				  .Method([Required]Arg1, Arg2)
				  .Method([Required]Arg1, [Default=XXX]Arg2)


Command
	SubCommand
	Field
	Method


CommandManager
	RootCommands


How to implement and integrate a new packet:
	Add an entry in PacketId.
	Create your class inheriting from Packet provided by the namespace NGConsole.
	Add your implementation in any PacketExecuter where you want to handle it.

How to implement and integrate a custom module's settings:
	Simple and easy way:
		To store data from your module, you need to use the methods Set/Get from an instance of ConsoleSettings.
		It works the same as an EditorPrefs, except the data are stored in ConsoleSettings.
		In OnEnable(), use the method Get() from an instance of ConsoleSettings to fetch data;
		In OnDisable(), use the method Set() from an instance of ConsoleSettings to save data. Complex object must have the attribute Serializable.
		To expose your custom settings in ConsoleSettings's editor, call ConsoleSettingsEditor.AddSection() in OnEnable().
		To remove your custom settings, call ConsoleSettingsEditor.RemoveSection() in OnDisable().
		e.g. MainModule

	Advanced way:
		Implement a class inheriting from ScriptableObject with any settings you want.
		Use the class utility AutoExposeSettings to automatically handle most of the job.
		In the module, add a field of type AutoExposeSettings<T> with T the ScriptableObject you have just implemented.
		In OnEnable() of your module, populate your field with an instance of AutoExposeSettings<T>.
		In OnDisable(), add a call to Close() from your instance of AutoExposeSettings<T>.

		In case you need to initialize GUI, you may need to implement IGUIInitializer in your ScriptableObject, AutoExposeSettings<T> automatically handles it, but you need to manually call InitGUI() from field GUIInitializer in your instance of AutoExposeSettings<T> before using any of your GUI.
		e.g. RemoteModule


Network Schema
[    Server-Side   ][        ][    Internet   ][    Client-Side   ][              ]
[ ServerGameObject ][        ][ NetGameObject ][ ClientGameObject ][              ]
[ ServerComponent  ][        ][ NetComponent  ][ ClientComponent  ][              ]
[ ServerFieldInfo  ][ Packet ][   NetField    ][    ClientField   ][PacketExecuter]
[ServerPropertyInfo][        ][       Å™       ][        Å™         ][              ]
[ ServerMethodInfo ][        ][   NetMethod   ][   ClientMethod   ][              ]

How the server transmits Unity Object with a client?
When the server sends Unity Object, it first creates a wrapper of the Unity Object to keep a trace of it on its side.
Because there is no way to find an Object from any identifier at runtime without a registrar. Therefore we need to register it before transmitting it to any client.

Let's take an example with a GameObject, the server creates a ServerGameObject and register it using its instanceID as key. From now, we can reach it through its instanceID.
A Packet is created with the ServerGameObject, when the Packet is being sent, it converts ServerGameObject to NetGameObject, a format both understood by the server and the client.
At the receiption of the Packet, the client converts NetGameObject into a ClientGameObject.
See an example with classes ServerGameObject, NetGameObject, ClientGameObject.


How the server transmits other data with a client?
Packet does all the job. It contains data to send, converts it in a network format before sent and converts it back on client-side.
In your implementation of Packet, you can convert any object into a network transmittable format.
See class Packet.


NG Hierarchy Enhancer
Display custom data or buttons or any GUI in Hierarchy Window.
To achieve that, NG Hierarchy Enhancer looks into the hovered GameObject and searches for MonoBehaviours implementing IHierarchyMenuItem.
IHierarchyMenuItem provides the method DrawHierarchy, in which you can draw what ever you want.
Notice that you are not limited to the sole line, you can draw GUI bigger than the line and overwhelming other lines.
To use big GUI, you need to hold the inputs defined by "Hold Modifiers" in the options, that way you keep the focus the hovered GameObject.
Otherwise, your clicks will be propagated to other GameObjects.

NG Hierarchy Enhancer provides a way to create custom GUI for Unity built-ins.
Create a class inheriting from DynamicObjectMenu.
e.g. See built-in GameObjectMenu, it draws a toggle button to activate/deactivate the GameObject.

Warning, it can happen that your modifications are not saved correctly. Just call EditorUtility.SetDirty on the Object.